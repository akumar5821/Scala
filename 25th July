object NameAndAge extends App{
  val name = StdIn.readLine("Enter your name: ")
  println("Enter your age: ")
  val age = StdIn.readInt()
  println(Console.BOLD)
  print("Name: ")
  print(Console.UNDERLINED)
  print(name)
  println(Console.BOLD)
  print("Age: ")
  print(Console.RESET)
  print(age)
}

object FindNthCharacter extends App{
  val str = StdIn.readLine()
  println("Entered input is : " + str)
  val charToFind = str.charAt(7)
  println(s"The 8th character literal in $str = $charToFind")
}

object  favouriteMovie extends  App{
  val fav = StdIn.readLine("what is your favourite movie?")
  println(s"Your favourite movie of all time is $fav")
}


object favouriteMovieDetails extends App{
  val fname = StdIn.readLine("Enter your First name: ")
  val lname = StdIn.readLine("Enter your last name: ")
  val favMovie = StdIn.readLine("Enter your favourite movie: " )
  println(s"Good Morning, $fname $lname. Your favourite movie of all time is $favMovie")
}

object fastFood extends App{
  val donutBoughtstr = "Vanilla Donut 10 2.25"
  val splitStr = donutBoughtstr.split(" ")
  val donutType = splitStr(0)
  val donutName = splitStr(1)
  val donutQty = splitStr(2).toInt
  val donutPrice = splitStr(3).toDouble

  val donutOutput =
    s"""
      |Donut Name: = $donutType $donutName
      |Donut Price: = $$$donutPrice
      |Donut Purchased: = $donutQty
      |""".stripMargin

  println(donutOutput)
}


object findCommonItems extends App{
  val setBasketOne = Set("cake", "bread", "milk","meat")
  val setBasketTwo = Set("meat", "mobile", "bread", "chair")
  val commonItems = setBasketOne intersect(setBasketTwo)
  println(commonItems)
}

object SampleCode{
  def sumValues(n:Int): Double ={
    if(n<1)
      0.0
    else
      readDouble() + sumValues(n-1)
  }
  def main(args:Array[String]): Unit ={
    println(sumValues(3))
  }
}

object SampleCode{
  def sumValues(n:Int): Double ={
    if(n<1)
      0.0
    else
      readDouble() + sumValues(n-1)
  }
  def productValues(n:Int): Double ={
    if(n<1)
      0.0
    else
      readDouble() + productValues(n-1)
  }
  def combineValues(n:Int, base:Double, op:(Double,Double)=>Double): Double ={
    if(n<1) base
    else
      op(readDouble(),combineValues(n-1,base,op))
  }

  def bubbleSort(arr: Array[Double]): Unit ={
    for(i<-0 until arr.length-1; j<- 0 until arr.length-1-i){
      if(arr(j+1)<arr(j)) {
        arr(j) = arr(j+1)
        arr(j+1) = tmp
      }
    }
  }
  def main(args:Array[String]): Unit ={
    println(sumValues(3))
  }
}
